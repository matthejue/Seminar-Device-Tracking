* Zusammenfassende Erkenntnisse
  - phase 1, all attacker tuples that are uniquely mapped to cells of perturbation table in middle, outside new candidtes
  - phase 2, all atatcker tuples outside, loopback tuples inside
  - device id ist `{(port_dest1, port_dest2), (port_dest1, port_dest3)}`
  -- man kennt die destinationsports, weil man ja im Code den man geschickt hat schon festgelegt hat welche in welcher Reihenfolge geschickt werden solen
  -- dementsprechend würde es auch Sinn machen, dass die Destinationports jedes mal die gleichen sind, da man jedes mal den gleichen Code schickt

* Schindelhauer Fragen
  - warum der double hash port selection algorithmus 2 keys hat und nicht einen key für beide hash functions?
  - warum kann man bei tcp nicht einfach alle ports ausprobieren?
  - in the Linux kernel, by default, min_ephemeral = 32768,max_ephemeral = 60999

  - double hash Grund nirgendwo auffindbar -> bei 2 countern, deren offset sehr nah nebeneinern sind, würde die immer miteinander kollidierern
  - TCP annehmen ohne erklären?
  -- TCP Syn-Packete
  -- TIME\_WAIT state
  - ChatGPT Bild als Quelle
  -- was mit Logos die ähnlich zu Firmenlogos?
  - Fazit notwendig? comparison to other related work? Countermeasures enough?
  - Quellenangaben korrekt? 
  -- Alles an einem Ort ok?
  - Report kleiner Fehler
  - was bei lang zu beantwortender Frage?

  - generelle Fragen mit denen man immer rechnen muss
  -- hat sich noch was getan
  -- praktische Anwendung
  -- günther müller Frage
  -- Birtday paradoxon

  - Folien heller machen
  - darauf hinweisen, dass Report neue Version hochgeladen 
  -- und longversion ebenfalls hochladen
  - ChatGPT in Quelle für Bilder
  - TCP Folien reinmachen, Wieviele wissen was TCP ist?
  - l - n - 1 nur für l>n
  - wo kommt -1 her?

* Zu klärende Fragen
  - does one have to always us same loopback addresses but differnert attacker tuples possible?
  - wie funktioniert dieses x-Funktion in Phase 2
  - only has this output in phase 2. How find out which loopback 3-tuple if several loopback-tuples in mmiddle?
  - wie das mit Server genau, mehrere Server oder nur einer reicht?
  - warum funktioniert es über manche VPNS oder Proxies?
  - warum kann man nicht einfach device id aus attacker 3-tuples bauen?
  - warum muss man sich in Phase 1 nicht um andere TCP connections Gedanken machen?
  - wie löste Meltdown das Problem?
  - warurm sieht dhps so aus, wie es aussieht?
  - kann man aus TCP-Syn Packet wirklich das gesamte 4-Tuple ablesen oder nur source port?
  - das mit Uniqueness besser verstehen
  - Laufzeit der Algorithmen
  - warum ist noise beim phase 2 algorithmus kein Problem?
  - warum returnt der phase 2 algorithmus auch l?
  - why individual countermeasures necessary? why not one of them enough?
  - was ist der Datentyp der einzelnen Zellen der perturbation table?

* Darüber noch informieren
  - How Meltdown work, so sind sich beide Verfahren ähnlich?
  - why does one have ports in first place?
  - TCP details wie
  -- TCP Syn-Packete
  -- TIME\_WAIT state
  - warum sieht der DHCP algorithmus so aus?
  - TCP und UDP generelles Wissen
  - attacker 3-tuple that is also in the TCP-Syn packet?
  - mögliche Angriffe, wenn man keinen source port selection Algorithmus nutzt, off path, blind reset und data blind injection attack
  - Was ist Hash-Funktion. Assumptions about Hash Funktion?
  - Sind es wirklich nur tcp connection attempts?
  - Wie lange dauert Angriff?
  - Wieviele l braucht man den durchschnittlich?
  - was eine Hash Funktion nochmal war
  - off-path attacks, such as blind reset or data injection attacks

* Fragen an Studenten
  - welcher von beiden Keys ist der Key von dem ich Anfang gesprochen habe?
  - what is the only predictable things?
  - what are loopback tuples / adresses?
  - why loop T many times?
  - after explaining phase 1: how can one find out which are the candidates
  - after explaining phase 2: how can one find out to which perturbation cell a loopback 3tuple is mapped?
  - Does someone see the sandwich?
  - Blackbox, cannot directly read peturbation cell entries and keys F and G also unkown, only can decide some code inside it and get Syn-packets where destination port gets influenced by the predictably increasing perturbation table cell entries
  - why does it have to be independant?
  -- 19: Note:...
  - why this n <=
  -- 19: Note that this allows a simpler imple-
  - Wie unterscheidet man bei Mitte, welcher es war wenn da mehrere waren?
  -- bei phase 1 einfach, weil die neuen candidate attack 3-tuples außen sind, hat man anhand durch Syn-Pakete direkte Zuordnung von attack 3-tuples zu destination ports
  --- ports können ja völlig unterschiedlich sein, wie sieht man jetzt welche attacker 3-tuple candidates man miteinander vergleichen kann?
  ---- man substrahiert nur entsprechende destination ports, wo der Schlüssel, die attacker 3-tuples diesen entsprechen (das alles liest man aus Syn Packeten raus)
  -- bei phase 2 weil man immer nur ein Loopback 3-Tuple schickt, aber dieses mehrfach, so kann sich nur ein Attacker 3-Tuple ändern
  --- man sendet mehrere, weil?
  - Warum funktioiert es über Browser Sessions hinweg?
  -- weil Key einmal beim Starten des PC's erstellt wird
  - kann man Index in T-Table Zelle  eines attacker tuples mappings heruasfinden?
  -- man weiß nicht genau welche Zelle der T-Table, man weiß nur, dass jedes attacker 3-tuple auf eine Zelle mapt
  - golden image test name origin
  - whhat is this? -> transitivity
  - remeber this (k over 2)
  - multiuser system

* Appendix Fragen
  - this formula behind n
  - answering those questions
  - why does one have to do it so indirectly over this attacker 3-tuples? 
  -- Blackbox, only for Syn-Packets of attacker 3-tuples, Loopback 3-tuples unaccesabile for outeside attacker
  - Wie findet man in Iplemtneering Attacker Destination Ports raus -> Syn-Packete
  - resource consumption
  - related work
  - comparison to other
  - attacker 3-tuples collide means map to same perturbatio table cell

* Zusammenhangslose Erkenntnisse
  - urnenmodel links n, da liest man die n kugeln die k podestplätzen
  - fächermodel rechts n, da liest man die n Fächer denen k kugeln zugeordnet wurden ab
  - ports sind unterschiedlich, die Kollisionen in der Tabelle werden sichtbar, weil bei genau gleichem Input ein Port beim zweiten mal um mehr als 1 erhöht ist, was passiert, weil die gleiche Zelle in der perturbation tabelle zwischendurch verwendet wurde von irgendeinem der bererits zugewiesenen attack-tupeln, die in diesesm Sandwich in der mitte alle für TCP Connections verwendet werden
  - für die loopback-tupel kann man es nicht so machen, wie für die attack-tupel, weil loopback auf dem device selber ist und der angrieifer nicht die syn-packete von dem device bekommen kann. Der Angreifer kommt nur die syn-packete der attack-tupels, weil er da selbst die destination ist
  -  These collisions, described as pairs of loopback 3-tuples (soureports?) that hash to the same value, form the device ID
  -- The attacker collects and counts "independent" colliding
     pairs. By this term we mean that if there are exactly $k$ loopback 3-tuples (sourcepots) $x1,...,xk$ that fall into the same cell, the attacker only uses k −1 pairs e.g. $(x1,x2),...,(x1,xk)$
  - für eine bestimmte Zelle der perturbation table wird das erste mal der else branch ausgeführt und das zweite mal der if branch sobald ne collision auftritt. Die Zelle wird über die Sanchwich Takti bestimmt überr attack-tuples
  --- die Funktion mit dem x returnt den sourceport des attack tuple / das attack tuple für das bei den entsprechenden attack-tupels ne Kollistion auftraucht durch einen Sourrceport der im vergleich zu vorher um 2 und nicht nur um 1 erhöht ist
  --- dieses returnte attac-tuple / dieser attac source eport wird später genutzt um wenn dieses Zelle der perturbation table bereits bekannt ist die entspreechenden pairs von lopbac tuples zusammezustellen
  --- bw wird dabei dafür genutzt die erste occurce für eine bestimmte Tabellenzelle festzuhalten, damit man diess independant pairs of loopbac tuples collection kann
  - loopback 3-tuples, which (together with the number of iterations l) form the device ID
  - es gibt ganz viele variablen bw, die das erste loopback-tuple für eine Zelle der perturbation table festhalten, um dann deer List C independant pairs wo immer das este gefunden loopback tuple das von einem attack-tuple detektierrt wurde festzuhalten
  - bw ist dann variable für das attac tuple w das eine Zelle der paturbation Zelle entsprict (was in phase 1 so bestimmte wurdee das jede Zelle der petrubaton table ein zugewiesesnes attack-tuple hat) und das erste gefunden loopback tuple speichert für welches eine Kollision über das attac tuple w detektiert wurde
  - attacker maps a new loopback 3-tuple Li to an attacker 3-tuple w by bw, w ist a table, better imagine b[w]
  - si von phase 1 wird in phase 2 reused
  - if wird nur bei if hochgezählt, weil erst da eine collision von 2 loopback tuples in der pertubation table ist
  - ein anderes device hhat ein anderes k2, aber ipsrc, ipdest, portdest sind genau gleich
  - die genauen attacker-tuples sind egal, es geht nur darum jede Zelle der perturbation table abgedeckt zu haben. Die Attacer tuples sind nur zum detecten der colisionen von loopback tuples für den attacker wichtig, weil der attacker die colisionen anders nicht aufspüren kann
  -- es müssten dann in phase 2 theoretisch immer die gleiche Liste von loopback tuples sein oder bis man alle ports port_dest durchprobiert hat die man in (ipsrc, ipdest, port_dest) einsetzt
  --- port_src ist nur zu bestimmten von colisionen über die attack-3tuples wichtig
  - l-n occupied buckets, weil in jeder Iteration, wo es keine über die attack-tuple registierte colision gab, ein neues b[w] definiert / assigned wird (und b[w] entsspricht de perturbation tabelle in Anzahl Zellen, nur nicht in der Struktur, weil man nicht weiß welche attack-tuples auf welche Zelle der perturbation zelle gemappt wird, man weiß nur das es auf eine Zelle gemapped ist) und n ist die Anzal der colisionen
  --- es wird in jeder iteration ein loop-back tuple iwo hinzugefügt

* ToDo
  - ( ) Aspekt mit hash colisions ausnutzen reinmachen
  - ( ) das mit Blackbox
  - ( ) das mit predicatable um 1 erhöhen schonmal erwähnen beim der Erklärung von DHCP und das man das von dem berechneten Sourceport ablesen kann
  - ( ) Appendix, weil auf 4 Seiten beschränken musste
  - ( ) konkrett erwähnen, dass es wegen dem Key über Browser Sessions hinweg avialable ist
  - ( ) In Conclusionn wird eine perfekte Wortwahl getroffen
  - ( ) die Condition zum herausfinden in Phase 2 welche loopbpack clidiert auch reinschreiben
  - ( ) erwähnen, dass bei der Sandwich Methode die äußeren immer gleich sind und daher schonaml increase um 1, aber nicht mehr als 1..., weil die immergleichen verglichen werden
  - ( ) was genaub das x bei {x | P(x) - P'(x) = 1} ist
  -- ( ) durch was genau der iota operator ist dich von  {x | P(x) - P'(x) = 1} unterschiedet, nur genau ein Element
  - ( ) TCP Syn-Pakete die relevanten Felder markieren
  - ( ) By indirectly observing such collisions for loopback 3-tuples inputs, the attacker calculates an *invariant* device ID
  - (x) bei Satz: "A device ID based..." noch konkrett was external IP, source or derstination?, ist wahrscheinlich source
  - ( ) Conventions and Terminology noch auf collision auf loopback 3 -tuples als concention das erste mal wo es vorkommt verweisen
  - ( ) Eigschaften der Hash Funktion, kann man einfach jede nehmen?
  - ( ) tracking server als weitere Instaz erwähnen
  - ( ) This information is only available at the tracking server.
  - localhost address, tracking serve tcp connection attempts.
  - sanwdich methdo braucht die source ports
  - nur attempts nötig
  - collisions in same parturbation table cell mention G_{K_2}
  - (Connection localhost address und loopback 3-tuples), corrected
  - informieren, ob

* Erklärweise
** Vogehen allgemien
   - website loaded on attacked device, website limited access
   - have attacker 3-tuples and loopback 3-tuples, why importat later
   - fingerprint mentioned in introduction is invariant device id by indirectly observing which loopback 3-tuple colisions inside a perturbation table and the structure they build, this G()=G() formula
   -- independant loopback destination ports
   --- why independant *ToDo*
   -- the key mentioned in section introduction is the key k2, parameter to G function, persistent and invariant device ID is tied to this key that is randomly generated at each system startup and thus survives browser privacy modes and network changes (it persists across browsers, browser privacy mode, network switching, some VPNs, and even across Linux containers)
   -- device id by attacker 3-tuple colisions is not consistent across networks, "using the Internet-facing address of the device does not yield a consistent device ID across networks", 127.x.x.x does not change across networks *(question to students)*
   - blackbox
   -- limited access browser sandbox, cannot directly observe collisions of loopback 3-tuples
   -- anther possibility would be to observe loopback 3-tuples via source port increments
   - like in particle accelerator, cannot directly observe collisions of loopback 3-tuples, only observe side-effects of collisions of loopback 3-tuples in perturbation table cells, a method that exploits those sideffects is...
   - only problem is, cannot directly observe source port increments by loopback 3-tuples, limited access browser sandbox, higher level, loopback 3-tuples alwas stay intnernal
   - but can observe attacker 3-tuples
   - sandwich method, it uses of attacker 3-tuples and exploits / abuses that their destination port calculated by dhps changes in a predictable way to detect collisions of 3-tuples (internet-facing / attacker or loopback) in cells of perturbation table (*usecase*)
   -- destination port calculated by dhps increments in a predictable way because in dhps algorithm perturbation table incremented in a predictable way in line ...
   -- attacker 3-tuples have to be used to detect those increments, because the attacker can only gets TCP-Syn packets for them and thereby the essential sourceport address calculated by dhps for attacker 3-tuple, not possible for loopback 3-tuple
   -- the general principle is:
   --- first in the sandwich dhps for a attacker 3-tuple calculates one source port
   --- and for same attacker 3-tuple in the sandwich dhps later caculates a 2nd time a source port which will this time be incremented by 1
   ---- _in following:_ if one says a attacker 3-tuple had a source port increment by 1, one means when taking differene of the source port genereated by dhps for same attacker 3-tuple (that is read out of TCP-Syn package) when establishing a TCP connection at beginning and end of the sanwdich (*definition*)
   --- if inside the sandwich in between those 2 points in time another tcp connection (internet-facing or loopback) uses the same perturbaton table cell
   ---- then the 2nd time the same attacker 3-tuple in the sandwich makes a tcp connection dhcp will calculate a source port that is increment by 2 and not 1 compared to the first calculated source port in the sandwich
   --- typically one establishes several typ connections with attacker 3-tuples in the outer sawndich. After applying sandwich one knows which attacker 3-tuple had which source port value at which point in time, because the TCP-Syn packet basically includes the full attacker 4-tuple which can easily be transformed into a mapping from a attacker 3-tuple to a source port. In phase 1 and 2 one determines in this way the increment of a certain attacker 3-tuple when applying the sandwich method
   - to actually detect which loopback 3-tuples collide in the same perturbation table cell (phase 2) one has to look at colisions of loopback 3-turples and attacker 3-tuples in the same perturbation table cell via sandwich method
   -- for this one also needs a set of attacker 3-tuples that cover each cell of the perturbation table which one determiens in phase 1 via the sandwich method
** Phase 1
   - output: unique attacker 3-tuples
   -- set of attacker 3-tuples that each uniquely cover one cell of the perturbation table (*definition*)
   - sawndwich method
   -- inner: currently found unique attacker 3-tuples
   -- outer: new unique attacker 3-tuple candidates
   --- possible candidates to become unique attacker 3-tuples if they don't collide with any of the already found unique attacker 3-tuples (*definition*)
   -- condition: those attacker 3-tuples in *outer* sandwich whose source port only had a source port increment by 1 are the first to map to a new perturbation table cell to which none of the already found unique attacker 3-tuples already maps as they don't collide with any of the already found unique attacker 3-tuples and are thus also new unique attacker 3-tuples
   --- thus one can create a set of unique attacker 3-tuples where each uniquely maps to a discrete perturbation table cells, one doesn't know which attacker 3-tuple uniquely mapt to which index of the perturbation table, but one know that each perturbation table cell is covered by one unique attacker 3-tuple
   -- noise: noise can hide a unique mapping, but it can’t fabricate one, no problem
   - algorithmus
   -- das x set, x ist attacker 3-tuples, P ist assignment attacker 3-tuples to destination port
    - ends as soon as...
** Phase 2
   - This algorithm utilizes the sandwiching technique, introduec earlier in section \ref{sec:attack}. This technique operates as follows:
   -- inner: single loopback 3-tuple in the middle
   --- only 1 at a time, because if they tested multiple loopback 3-tuples simultaneously without any further design, they would not be able to tell which loopback 3-tuple caused the increment in which attacker 3-tuple
   -- outur: unique attacker 3-tuples
   -- condition: a loopback 3-tuple in the *inner* sandwich by repeated established TCP-connections causes a signifcant increment >epsilon to a unique attacker 3-tuple
   --- As only 1 loopback 3-tuple repeatedy establishes TCP-connections also only 1 unique attacker 3-tuple gets incremented (G function has same input everyime) siginifcanly >epsilon and all others not. This means that the loopback 3-tuple collides in the same perturbataion table cell with the unique attacker 3-tuple. As each unique attacker 3-tuple uniquely represents a discrete perturbation table cell (even tough one doesn't know which exactly), this allows to determine which loopback 3-tuples collide in the same perturbation table cell (without knowing which it is specifically) with which unique attacker 3-tuples they collide in the same perturbation cell, i.e. for which unique attacker 3-tuples they cause a significant increment
   --- and thus one determines a structure of loopback 3-tuples that collide in the same perturbation table cell and use this structure as a device id where one collects a set of independant pairs of loopback destination ports *keine repetition?*. Thus the output is a device id made out of indepedant pairs of destination ports of loopback 3-tuples building a structure of loopback 3-tuples that collide in the same perturbation table cell
   -- one needs a significat increment because of noise: send same unique attacker 3-tuple several times to have a detectable increment in perturbation table entry, attacked device could have other TCP-connections that increment the counter, this noise has to be outweighted *(question to students)*
   - algorithmus
   -- die iota funtkion und wie sie sich von dem x-set unterscheidet, nur einelnes unique attacker 3-tuple returned
   -- ends as soon as...
   -- reason for n condition
   --- Erklärung der Formel:
   ---- l-n-1 Multiplikationen, weil l-n occupied buckets, balls in buckets problem., in every round one cel gets one more ball / loopback 3-tuple, everytime there's already a ball, no new bucket could be occupied (means there's an independant pair, n = number of independant pairs / collisions), so n is the amount of times no new bucket could be occupied from the l many iterations where a new ball gets added
   ---- (T-j)/T ist für erste loopback 3-tuple in einer Zelle für D an genau gleich wie bei D', erster hat Chance T/T, zweiter (T-1)/T usw., (T-j)/T = T/T - j/T = 1 - j/T
   ---- das alle anderen loopback 3-tuple in D' sich genauso auf diese ersten loopback 3-tuple verteilen wie bei bei D ist jeweils 1/T, also für alle n Kollisionen dann 1/T^n
   --- D ist wie loopback 3-tuple colissionen gruppiert sind
   --- wenn man sich die Formel für P^l_D(n) anschaut, dann
   ---- increase l -> decrease P^l_D(n), cuz:
   ----- mehr Multiplikationen von Zahlen <1 
   ---- increase n -> decrease P^l_D(n), cuz:
   ----- weniger Multiplikationen von Zahlen <1, aber 1/T^n überwiegt
   ---- wenn D sehr biased ist bei loopback 3-tuple Verteilung -> mehr Kollisionen (viele Zellen garnicht erst abgedeckt) -> höheres n -> P^l_D(n) ist decreased -> man braucht kürzer, um unter p* zu kommen, weil nicht nur i, sondern auch n hochgeht bei Kollisionen
   ---- wenn D sehr uniform ist bei loopback 3-tuple Verteilung -> weniger Kollisionen (viele Zellen abgedeckt) -> höheres n -> P^l_D(n) nicht decreased -> man braucht länger, um unter p* zu kommen, weil man sich häufig alleinig darauf verlassen muss, dass i hochgeht
   -- wenn man sich Formel für P^l_D(n) anschaut, dann
   --- p* threshold acceptance probability, the maximum acceptable probability that any two random devices share the same device ID after the attack, maximal accepted probability for a random device to have the same device ID as the current device
   --- c* average number of device ID collisions, maximum average number of device ID collisions the attacker is willing to tolerate in that population
   --- N population size, the number of devices the attacker wants to distinguish among
   --- (N over 2) = the number of distinct device pairs among N devices
   --- if increase c* -> p* becomes higher -> fewer i and n required to reach treshhold -> tracking precision decreases, but attack finished faster
   --- if increase N -> (N over 2) grows quadratically cuz of `(N*(N-1))/2` -> p* becomes smaller -> more i and n required to reach treshhold -> attack takes longer
   - wenn man das ganze nur über n macht:
   --- sequential treshold method / test, function with multiple controlable parameters, treshold condition, fix all other parameter's besides one, precompute this one paramter minimal n that guarantess that treshold condition is met and calculate this for all parameters
   --- if i/l increases -> more loopback 3-tuples (in every iteration on more) increase the chance of collisions -> fewer collisions neededy to achieve same confidence that device id is unique -> n^*\[i/l\] decreases or stays the same
   --- if D is biased -> collisions more likely -> lower P^l_D(n) -> lower n^*\[l\]
   --- if D is uniform -> collisions less likely -> higher P^l_D(n) -> higher n^*\[l\]
   --- if p* increases -> lower n^*\[l\] and thus less independant pairs required to uniquely identify device
   - mit allen i hochgehen lassen wird es auch terminieren, nur mit n hochgehen terminiert es schneller
   -- ab einem bestimmten i ist n einfach 0 und damit ist sogar für n=0 dann n=0>=0=n*[<large_number>] erfüllt
   -- Tabelle aus Vorlesung für c*=1
